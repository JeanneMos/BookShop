{"version":3,"file":"PersonalInfoForm.bundle.js","mappings":"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","sources":["webpack://espace-souvenir/./docroot/themes/custom/souvenirs/src/js/components/Forms/AdministratorPersonalInfoForm.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { postUserUpdateUrl } from \"../../constants\";\nimport {\n  administratorPersonalInfoModified,\n  currentUserSet,\n} from \"../../context/administratorSlice\";\nimport { espaceAdministratorUpdated } from \"../../context/globalInfoSlice\";\nimport ButtonsWrapper from \"../../layouts/ButtonsWrapper\";\nimport scrollSmoothToElement from \"../../services/scrollSmoothToElement\";\nimport useForm from \"../../services/useForm\";\nimport usePostQuery from \"../../services/usePostQuery\";\nimport Button from \"../Button/Button\";\nimport Icon from \"../Icons/Icon\";\nimport Loader from \"../Loader/Loader\";\nimport FormInput from \"./FormInput\";\nimport NewPasswordFieldset from \"./NewPasswordFieldset\";\n\nconst validationValues = {\n  surname: {\n    pattern: {\n      value: /^([a-zA-Z\\u00C0-\\u00FF '-])+$/,\n      message: \"Merci de renseigner votre nom de famille correct\",\n    },\n    isRequired: true,\n    required: \"Merci de renseigner votre nom de famille\",\n  },\n  name: {\n    pattern: {\n      value: /^([a-zA-Z\\u00C0-\\u00FF '-])+$/,\n      message: \"Merci de renseigner votre prénom\",\n    },\n    isRequired: true,\n    required: \"Merci de renseigner votre prénom\",\n  },\n  email: {\n    isRequired: true,\n    required: \"Merci de renseigner votre email\",\n  },\n  phone: {\n    pattern: {\n      value: /^([0-9])+$/,\n      message:\n        \"Merci de renseigner le numéro de téléphone au format requis (ex. 0799999999)\",\n    },\n    isRequired: false,\n  },\n  current_password: {\n    isRequired: false,\n  },\n  repeat_new_password: {\n    isRequired: false,\n  },\n  new_password: {\n    isRequired: false,\n    patterns: [\n      {\n        name: \"patternNumber\",\n        value: /[0-9]/,\n      },\n      {\n        name: \"patternLength\",\n        value: /^[\\s\\S]{8,}$/,\n      },\n      {\n        name: \"patternMaj\",\n        value: /[A-Z]/,\n      },\n      {\n        name: \"patternSpecialChar\",\n        value: /[ !\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]/,\n      },\n    ],\n  },\n};\n\nexport default function AdministratorPersonalInfoForm({ closeForm }) {\n  const administratorState = useSelector((state) => state.administrator);\n  const globalInfoState = useSelector((state) => state.globalInfo);\n  const dispatch = useDispatch();\n  const [networkError, setNetworkError] = useState(\"\");\n  const [isLoader, setIsLoader] = useState(false);\n  const networkErrorMessage = useRef(null);\n\n  const initialFormState = {\n    surname: administratorState.currentUser?.lastName?.toUpperCase() || \"\",\n    name: administratorState.currentUser?.firstName || \"\",\n    phone: administratorState.currentUser?.phone || \"\",\n    email: administratorState.currentUser?.email || \"\",\n    current_password: \"\",\n    new_password: \"\",\n    repeat_new_password: \"\",\n  };\n  const {\n    inputValues,\n    changeHandler,\n    errorHandler,\n    submitErrorsHandler,\n    errors,\n    isValid,\n  } = useForm({\n    initialFormState,\n    validationValues,\n  });\n\n  const updatePersonalInfo = usePostQuery();\n  const hiddenGlobalError = useRef();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const arrayOfErrors = Object.keys(errors);\n    if (!isValid && hiddenGlobalError.current) {\n      scrollSmoothToElement(hiddenGlobalError.current);\n    }\n\n    if (arrayOfErrors.length === 0) {\n      const emptyFields = Object.entries(inputValues)\n        .filter(\n          ([key, value]) => validationValues[key].isRequired && value === \"\",\n        )\n        .map(([key]) => key);\n\n      if (emptyFields.length) {\n        submitErrorsHandler(emptyFields);\n      } else if (\n        inputValues.new_password !== \"\" &&\n        inputValues.repeat_new_password === \"\"\n      ) {\n        // Check if new password is not empty but confirm new password is empty\n        submitErrorsHandler([\n          ...emptyFields,\n          {\n            name: \"repeat_new_password\",\n            requiredMessage: \"Merci de confirmer votre mot de passe\",\n          },\n        ]);\n      } else if (\n        inputValues.new_password !== \"\" &&\n        inputValues.repeat_new_password !== inputValues.new_password\n      ) {\n        // Check the correspondance between new password and confirm new password\n        submitErrorsHandler([\n          ...emptyFields,\n          {\n            name: \"repeat_new_password\",\n            requiredMessage: \"Les mots de passes ne sont pas identiques\",\n          },\n        ]);\n      } else if (\n        inputValues.new_password !== \"\" &&\n        inputValues.current_password === \"\"\n      ) {\n        // Check if new password is not empty but current password is empty\n        submitErrorsHandler([\n          ...emptyFields,\n          {\n            name: \"current_password\",\n            requiredMessage: \"Merci de confirmer votre mot de passe actuel\",\n          },\n        ]);\n      } else {\n        const infos_obj = {\n          surname: inputValues.surname,\n          name: inputValues.name,\n          phone: inputValues.phone,\n          mail: administratorState.currentUser?.email,\n          brand: globalInfoState?.marque?.name || \"pfg\",\n          current_password: inputValues.current_password,\n          new_password: inputValues.new_password,\n          repeat_new_password: inputValues.repeat_new_password,\n        };\n        try {\n          setIsLoader(true);\n          updatePersonalInfo.mutate(\n            { data: infos_obj, apiUrl: postUserUpdateUrl },\n            {\n              onSuccess: ({ data }) => {\n                if (data?.status && data?.status === 200) {\n                  const {\n                    field_user_surname: lastName,\n                    field_user_name: firstName,\n                    field_user_phone: phone,\n                  } = data;\n                  const updatedUserInfo = {\n                    ...administratorState?.currentUser,\n                    lastName,\n                    firstName,\n                    phone,\n                  };\n\n                  dispatch(currentUserSet({ user: updatedUserInfo }));\n                  if (administratorState.isAdmin) {\n                    dispatch(\n                      espaceAdministratorUpdated({\n                        firstName: updatedUserInfo.firstName,\n                        lastName: updatedUserInfo.lastName,\n                      }),\n                    );\n                  }\n                  dispatch(\n                    administratorPersonalInfoModified({\n                      isEditingPersonalInfo: false,\n                      isEditingAdministator: true,\n                    }),\n                  );\n                  closeForm({ userUpdated: true });\n                } else {\n                  setIsLoader(false);\n                  setNetworkError(\n                    \"Une erreur s'est produite. Veuillez reprendre ultérieurement.\",\n                  );\n                  networkErrorMessage?.current &&\n                    scrollSmoothToElement(networkErrorMessage.current);\n                }\n              },\n              onError: () => {\n                setIsLoader(false);\n                setNetworkError(\n                  \"Une erreur s'est produite. Veuillez reprendre ultérieurement.\",\n                );\n                networkErrorMessage?.current &&\n                  scrollSmoothToElement(networkErrorMessage.current);\n              },\n            },\n          );\n        } catch {\n          // Something went wrong\n          setIsLoader(false);\n          setNetworkError(\n            \"Une erreur s'est produite. Veuillez reprendre ultérieurement.\",\n          );\n          networkErrorMessage?.current &&\n            scrollSmoothToElement(networkErrorMessage.current);\n        }\n      }\n    }\n  };\n\n  const handleCloseForm = () => {\n    dispatch(\n      administratorPersonalInfoModified({\n        isEditingPersonalInfo: false,\n        isEditingAdministator: true,\n      }),\n    );\n  };\n\n  return (\n    <>\n      {networkError && (\n        <p ref={networkErrorMessage} className=\"message-status mb-40\">\n          <Icon name=\"cross\" iconClass=\"message-status-icon error-icon\" />\n          <span>{networkError}</span>\n        </p>\n      )}\n      <h2 className=\"content-heading-2\">\n        Modification des informations personnelles\n      </h2>\n      {!isValid && (\n        <p className=\"sr-only\" tabIndex={0} ref={hiddenGlobalError}>\n          Merci de corriger les erreurs\n        </p>\n      )}\n      <form noValidate onSubmit={handleSubmit} className=\"personal-info-form\">\n        <fieldset aria-describedby=\"personal-info\">\n          <p className=\"fieldset-description\" id=\"personal-info\">\n            Coordonnées\n          </p>\n          <FormInput\n            id=\"surname\"\n            name=\"surname\"\n            labelText=\"Nom\"\n            type=\"text\"\n            isRequired\n            inputClass=\"uppercase\"\n            autocomplete=\"family-name\"\n            value={inputValues.surname}\n            inputPlaceholder=\"Nom\"\n            onInputChange={changeHandler}\n            onInputBlur={errorHandler}\n            error={errors.surname}\n          />\n          <FormInput\n            id=\"name\"\n            name=\"name\"\n            labelText=\"Prénom\"\n            type=\"text\"\n            isRequired\n            autocomplete=\"given-name\"\n            value={inputValues.name}\n            inputPlaceholder=\"Prénom\"\n            onInputChange={changeHandler}\n            onInputBlur={errorHandler}\n            error={errors.name}\n          />\n          <FormInput\n            id=\"email\"\n            name=\"email\"\n            labelText=\"Email\"\n            type=\"email\"\n            readOnly\n            isRequired\n            autocomplete=\"email\"\n            value={inputValues.email}\n            inputPlaceholder=\"Email\"\n            onInputChange={changeHandler}\n            onInputBlur={errorHandler}\n            error={errors.email}\n          />\n          <FormInput\n            id=\"phone\"\n            name=\"phone\"\n            labelText=\"Téléphone\"\n            type=\"tel\"\n            max={14}\n            autocomplete=\"tel\"\n            value={inputValues.phone}\n            inputPlaceholder=\"Téléphone\"\n            onInputChange={changeHandler}\n            onInputBlur={errorHandler}\n            error={errors.phone}\n          />\n          <FormInput\n            type=\"checkbox\"\n            id=\"eventsOptin\"\n            name=\"eventsOptin\"\n            wrapperClass=\"mt-30\"\n            isRequired={false}\n            labelText=\"Je souhaite être alerté des évènements privés ajoutés dans cet Espace Souvenirs\"\n          />\n        </fieldset>\n        <fieldset aria-describedby=\"password-info\" className=\"mt-30\">\n          <p className=\"fieldset-description\" id=\"password-info\">\n            Mot de passe\n          </p>\n          <NewPasswordFieldset\n            includeCurrentPassword={true}\n            inputValues={inputValues}\n            changeHandler={changeHandler}\n            errorHandler={errorHandler}\n            errors={errors}\n          />\n        </fieldset>\n        <ButtonsWrapper position=\"right\" btnWrapperClass=\"mt-30\">\n          <Button\n            type=\"button\"\n            btnClass=\"bg-transparent\"\n            onClickAction={handleCloseForm}\n          >\n            Annuler\n          </Button>\n          <div className=\"button-loader-wrapper\">\n            <Button\n              type=\"submit\"\n              btnClass=\"bg-current\"\n              dataTestid=\"submitInfosForm\"\n            >\n              <span className=\"button-text\">Entregistrer</span>\n            </Button>\n            {isLoader && <Loader position=\"relative\" />}\n          </div>\n        </ButtonsWrapper>\n      </form>\n    </>\n  );\n}\n"],"names":["React","useRef","useState","useDispatch","useSelector","postUserUpdateUrl","administratorPersonalInfoModified","currentUserSet","espaceAdministratorUpdated","ButtonsWrapper","scrollSmoothToElement","useForm","usePostQuery","Button","Icon","Loader","FormInput","NewPasswordFieldset","validationValues","surname","pattern","value","message","isRequired","required","name","email","phone","current_password","repeat_new_password","new_password","patterns","AdministratorPersonalInfoForm","closeForm","administratorState","state","administrator","globalInfoState","globalInfo","dispatch","networkError","setNetworkError","isLoader","setIsLoader","networkErrorMessage","initialFormState","currentUser","lastName","toUpperCase","firstName","inputValues","changeHandler","errorHandler","submitErrorsHandler","errors","isValid","updatePersonalInfo","hiddenGlobalError","handleSubmit","e","preventDefault","arrayOfErrors","Object","keys","current","length","emptyFields","entries","filter","key","map","requiredMessage","infos_obj","mail","brand","marque","mutate","data","apiUrl","onSuccess","status","field_user_surname","field_user_name","field_user_phone","updatedUserInfo","user","isAdmin","isEditingPersonalInfo","isEditingAdministator","userUpdated","onError","handleCloseForm"],"sourceRoot":""}